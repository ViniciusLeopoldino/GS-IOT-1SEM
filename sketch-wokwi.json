/*
  PROJETO: SMAE - Versão com ESP32 e Conexão MQTT Real
  Autor: Vinicius Leopoldino de Oliveira - RM 557047
  Descrição: Este código roda em um ESP32, conecta-se ao Wi-Fi e a um broker MQTT
             público (HiveMQ) para publicar os dados dos sensores em tempo real.
*/

// --- BIBLIOTECAS ---
#include <WiFi.h>
#include <PubSubClient.h> // Para comunicação MQTT
#include <DHT.h>
#include <ArduinoJson.h>

// --- CONFIGURAÇÕES DE REDE ---
// O Wokwi simula uma rede Wi-Fi. 
const char* ssid = "Wokwi-GUEST";
const char* password = ""; // Senha em branco para a rede do Wokwi

// --- CONFIGURAÇÕES DO BROKER MQTT ---
const char* mqtt_server = "broker.hivemq.com"; // Broker MQTT público e gratuito
const char* mqtt_topic = "smae/station/01/data"; // Tópico para publicar os dados
const char* client_id = "smae-station-01-wokwi"; // ID único para o cliente

// --- OBJETOS DE CLIENTE ---
WiFiClient espClient;
PubSubClient client(espClient);

// --- MAPEAMENTO DE PINOS (ESP32) ---
// Sensor de Temperatura e Umidade DHT22
#define DHT_PIN 15 // GPIO15
#define DHT_TYPE DHT22
DHT dht(DHT_PIN, DHT_TYPE);

// Sensor Ultrassônico HC-SR04
const int TRIG_PIN = 12; // GPIO12
const int ECHO_PIN = 14; // GPIO14

// Atuadores
const int LED_VERDE_PIN = 2;   // GPIO2
const int LED_AMARELO_PIN = 4;   // GPIO4
const int LED_VERMELHO_PIN = 5;  // GPIO5
const int BUZZER_PIN = 13;   // GPIO13

// Parâmetros de Simulação (iguais aos do Arduino)
const float PROFUNDIDADE_MAXIMA_CM = 30.0;
const int NIVEL_ALERTA = 60;
const int NIVEL_PERIGO = 85;

// Função para configurar a conexão Wi-Fi
void setup_wifi() {
  delay(10);
  Serial.print("\nConectando a ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nWi-Fi conectado!");
  Serial.print("Endereço de IP: ");
  Serial.println(WiFi.localIP());
}

// Função para reconectar ao broker MQTT se a conexão cair
void reconnect_mqtt() {
  while (!client.connected()) {
    Serial.print("Tentando conexão MQTT...");
    if (client.connect(client_id)) {
      Serial.println("conectado!");
    } else {
      Serial.print("falhou, rc=");
      Serial.print(client.state());
      Serial.println(" tentando novamente em 5 segundos");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  
  // Configuração dos pinos (sensores e atuadores)
  dht.begin();
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(LED_VERDE_PIN, OUTPUT);
  pinMode(LED_AMARELO_PIN, OUTPUT);
  pinMode(LED_VERMELHO_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);

  // Conecta ao Wi-Fi e ao Broker
  setup_wifi();
  client.setServer(mqtt_server, 1883); // Porta padrão do MQTT
}

// O loop principal agora também verifica a conexão MQTT
void loop() {
  if (!client.connected()) {
    reconnect_mqtt();
  }
  client.loop(); // Mantém a conexão MQTT ativa

  float distancia_cm = lerDistanciaUltrassonico();
  float temperatura = dht.readTemperature();
  float umidade = dht.readHumidity();

  float nivel_agua_cm = PROFUNDIDADE_MAXIMA_CM - distancia_cm;
  if (nivel_agua_cm < 0) nivel_agua_cm = 0;
  int nivel_percentual = (nivel_agua_cm / PROFUNDIDADE_MAXIMA_CM) * 100;
  if (nivel_percentual > 100) nivel_percentual = 100;

  if (isnan(temperatura) || isnan(umidade)) {
    Serial.println("Falha ao ler o sensor DHT!");
  } else {
    verificarNivelAgua(nivel_percentual);
    publicarDadosMQTT(nivel_percentual, temperatura, umidade);
  }
  
  delay(5000); // Publica a cada 5 segundos
}

// Função para publicar os dados via MQTT (substitui o Serial.print)
void publicarDadosMQTT(int nivel, float temp, float umid) {
  StaticJsonDocument<200> doc;
  doc["nivelAgua"] = nivel;
  doc["temperatura"] = temp;
  doc["umidade"] = umid;
  
  char buffer[256];
  serializeJson(doc, buffer); // Converte o JSON para um buffer de texto
  
  client.publish(mqtt_topic, buffer); // Publica no tópico MQTT
  
  Serial.print("Mensagem publicada no tópico ");
  Serial.print(mqtt_topic);
  Serial.print(" -> ");
  Serial.println(buffer);
}

// Funções de leitura e controle
float lerDistanciaUltrassonico() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  long duracao = pulseIn(ECHO_PIN, HIGH);
  return duracao * 0.034 / 2;
}

void verificarNivelAgua(int nivel) {
  digitalWrite(LED_VERDE_PIN, LOW);
  digitalWrite(LED_AMARELO_PIN, LOW);
  digitalWrite(LED_VERMELHO_PIN, LOW);
  noTone(BUZZER_PIN);

  if (nivel >= NIVEL_PERIGO) {
    digitalWrite(LED_VERMELHO_PIN, HIGH);
    tone(BUZZER_PIN, 1500, 500);
  } else if (nivel >= NIVEL_ALERTA) {
    digitalWrite(LED_AMARELO_PIN, HIGH);
  } else {
    digitalWrite(LED_VERDE_PIN, HIGH);
  }
}
